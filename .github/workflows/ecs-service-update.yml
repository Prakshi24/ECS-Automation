name: Create new service and task definitions for image on ECS
on:
  pull_request:
    branches: [ develop ]

jobs:
  image-task-service:
    name: Build and push docker image to ECR, create task definition and deploy service.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout self.
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.head_ref }}
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}


      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="key=LOGS/terraform/state/tfstate-${{github.head_ref}}" ./scripts/ci
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color ./scripts/ci
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color ./scripts/ci
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -var='branch_name=${{ github.head_ref }}' -var='task_image_tag=${{ github.head_ref }}' ./scripts/ci

      - name: Comment msg generated by action
        uses: actions/github-script@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let msg = `Deployed test service for ${{ github.head_ref }}`;
            let prNumber = ${{ github.event.number }};

            if (msg !== "") {
              await github.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: msg,
              });
            }
